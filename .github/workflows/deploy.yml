name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - '.github/workflows/build-test.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ENVIRONMENT_NAME: ${{ github.event.inputs.environment || 'dev' }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION || 'eastus' }}
  RESOURCE_GROUP_NAME: rg-todolist-${{ github.event.inputs.environment || 'dev' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP_NAME }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags Environment=${{ env.ENVIRONMENT_NAME }} Application=TodoList ManagedBy=GitHubActions

    - name: Deploy Infrastructure
      id: infrastructure
      run: |
        # Deploy Bicep template with placeholder image first
        DEPLOYMENT_OUTPUT=$(az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file infra/main.bicep \
          --parameters \
            environmentName=${{ env.ENVIRONMENT_NAME }} \
            location=${{ env.AZURE_LOCATION }} \
            resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} \
            principalId="${{ env.AZURE_CLIENT_ID }}" \
            postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
            imageTag="latest" \
          --output json)
        
        # Extract outputs
        ACR_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.containerRegistryName.value')
        ACR_LOGIN_SERVER=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.containerRegistryLoginServer.value')
        
        echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

    - name: Build and Push Docker Image
      run: |
        # Get short SHA for image tag
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${{ steps.infrastructure.outputs.acr_login_server }}/todolist-app:$SHORT_SHA"
        
        # Login to ACR
        az acr login --name ${{ steps.infrastructure.outputs.acr_name }}
        
        # Build and push image
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update Container App
      id: update_app
      run: |
        # Re-deploy infrastructure with the actual image tag
        DEPLOYMENT_OUTPUT=$(az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file infra/main.bicep \
          --parameters \
            environmentName=${{ env.ENVIRONMENT_NAME }} \
            location=${{ env.AZURE_LOCATION }} \
            resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} \
            principalId="${{ env.AZURE_CLIENT_ID }}" \
            postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
            imageTag="$(echo ${{ github.sha }} | cut -c1-7)" \
          --output json)
        
        # Get app URL from deployment output
        APP_URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.todolistAppUrl.value')
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

    - name: Run Deployment Verification
      run: |
        echo "Waiting for application to be ready..."
        sleep 30
        
        # Test health endpoint
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f "${{ steps.update_app.outputs.app_url }}/health"; then
            echo "‚úÖ Application is healthy!"
            break
          else
            echo "‚è≥ Application not ready yet, retrying in 30 seconds..."
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Application failed to start within expected time"
          exit 1
        fi

    - name: Test API Endpoints
      run: |
        BASE_URL="${{ steps.update_app.outputs.app_url }}"
        
        # Test MCP endpoints
        echo "Testing MCP API endpoints..."
        
        # Get todos
        curl -f "$BASE_URL/mcp/todos" | jq .
        
        # Add a test todo
        curl -f -X POST "$BASE_URL/mcp/todos" \
          -H "Content-Type: application/json" \
          -d '{"title": "Test deployment", "isDone": false}' | jq .
        
        # Verify todo was added
        curl -f "$BASE_URL/mcp/todos" | jq '.todos[] | select(.Title == "Test deployment")'
        
        echo "‚úÖ All API tests passed!"

    - name: Output Deployment Information
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üìä Application URL: ${{ steps.update_app.outputs.app_url }}"
        echo "üè• Health Check: ${{ steps.update_app.outputs.app_url }}/health"
        echo "üìã API Endpoint: ${{ steps.update_app.outputs.app_url }}/mcp/todos"
        echo "üîß Environment: ${{ env.ENVIRONMENT_NAME }}"
        echo "üìç Location: ${{ env.AZURE_LOCATION }}"
        echo "üè∑Ô∏è  Image Tag: ${{ env.IMAGE_TAG }}"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment to ${{ env.ENVIRONMENT_NAME }} succeeded"
        else
          echo "‚ùå Deployment to ${{ env.ENVIRONMENT_NAME }} failed"
          exit 1
        fi
