name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  LOCATION: 'East US'

jobs:
  # Determine environment and configuration
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="dev"
          else
            ENV="none"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "resource-group=rg-todolist-$ENV" >> $GITHUB_OUTPUT
          echo "should-deploy=$([[ "$ENV" != "none" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          
          echo "Environment: $ENV"
          echo "Resource Group: rg-todolist-$ENV"

  # Validate Bicep templates
  validate:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group (for validation)
        run: |
          # Check if resource group exists and handle deletion state
          if az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; then
            RG_STATE=$(az group show --name ${{ needs.setup.outputs.resource-group }} --query provisioningState -o tsv 2>/dev/null || echo "NotFound")
            RG_LOCATION=$(az group show --name ${{ needs.setup.outputs.resource-group }} --query location -o tsv 2>/dev/null || echo "Unknown")
            
            if [ "$RG_STATE" = "Deleting" ]; then
              echo "Resource group is currently being deleted, waiting for completion..."
              while az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; do
                echo "Waiting for resource group deletion to complete..."
                sleep 15
              done
            elif [ "$RG_LOCATION" != "eastus" ]; then
              echo "Resource group exists in wrong location ($RG_LOCATION), deleting..."
              az group delete --name ${{ needs.setup.outputs.resource-group }} --yes --no-wait
              while az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; do
                echo "Waiting for resource group deletion..."
                sleep 15
              done
            else
              echo "Resource group exists in correct location ($RG_LOCATION)"
            fi
          fi

          # Create resource group if it doesn't exist
          if ! az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; then
            echo "Creating resource group..."
            az group create \
              --name ${{ needs.setup.outputs.resource-group }} \
              --location "${{ env.LOCATION }}" \
              --tags environment=${{ needs.setup.outputs.environment }} application=todolist
          else
            echo "Resource group already exists"
          fi

      - name: Validate Bicep templates
        run: |
          az bicep build --file infra/main.bicep
          az deployment group validate \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file infra/main.bicep \
            --parameters environment="${{ needs.setup.outputs.environment }}" \
            --parameters applicationName="todolist" \
            --parameters location="${{ env.LOCATION }}" \
            --parameters postgresAdminLogin="todolistadmin" \
            --parameters postgresAdminPassword='${{ secrets.POSTGRES_ADMIN_PASSWORD }}' \
            --parameters logRetentionInDays=30 \
            --parameters databaseSkuName="Standard_B1ms" \
            --parameters databaseStorageSizeGB=32 \
            --parameters enableDatabaseHA=false \
            --parameters minReplicas=0 \
            --parameters maxReplicas=10 \
            --parameters enableZoneRedundancy=false

  # Build and test application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

  # Deploy infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [setup, validate, build-and-test]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.app-url }}
    outputs:
      app-url: ${{ steps.deploy.outputs.app-url }}
      acr-name: ${{ steps.deploy.outputs.acr-name }}
      acr-server: ${{ steps.deploy.outputs.acr-server }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          # Check if resource group exists and handle deletion state
          if az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; then
            RG_STATE=$(az group show --name ${{ needs.setup.outputs.resource-group }} --query provisioningState -o tsv 2>/dev/null || echo "NotFound")
            RG_LOCATION=$(az group show --name ${{ needs.setup.outputs.resource-group }} --query location -o tsv 2>/dev/null || echo "Unknown")
            
            if [ "$RG_STATE" = "Deleting" ]; then
              echo "Resource group is currently being deleted, waiting for completion..."
              while az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; do
                echo "Waiting for resource group deletion to complete..."
                sleep 15
              done
            elif [ "$RG_LOCATION" != "eastus" ]; then
              echo "Resource group exists in wrong location ($RG_LOCATION), deleting..."
              az group delete --name ${{ needs.setup.outputs.resource-group }} --yes --no-wait
              while az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; do
                echo "Waiting for resource group deletion..."
                sleep 15
              done
            else
              echo "Resource group exists in correct location ($RG_LOCATION)"
            fi
          fi

          # Create resource group if it doesn't exist
          if ! az group show --name ${{ needs.setup.outputs.resource-group }} >/dev/null 2>&1; then
            echo "Creating resource group..."
            az group create \
              --name ${{ needs.setup.outputs.resource-group }} \
              --location "${{ env.LOCATION }}" \
              --tags environment=${{ needs.setup.outputs.environment }} application=todolist
          else
            echo "Resource group already exists"
          fi

      - name: Validate Bicep Template
        run: |
          echo "Validating Bicep template..."
          az bicep install
          az deployment group validate \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file infra/main.bicep \
            --parameters environment="${{ needs.setup.outputs.environment }}" \
            --parameters applicationName="todolist" \
            --parameters location="${{ env.LOCATION }}" \
            --parameters postgresAdminLogin="todolistadmin" \
            --parameters postgresAdminPassword='${{ secrets.POSTGRES_ADMIN_PASSWORD }}' \
            --parameters logRetentionInDays=30 \
            --parameters databaseSkuName="Standard_B1ms" \
            --parameters databaseStorageSizeGB=32 \
            --parameters enableDatabaseHA=false \
            --parameters minReplicas=0 \
            --parameters maxReplicas=10 \
            --parameters enableZoneRedundancy=false \
            --verbose

      - name: Deploy Infrastructure
        id: deploy
        run: |
          # Create unique deployment name
          DEPLOYMENT_NAME="todolist-${{ needs.setup.outputs.environment }}-$(date +%Y%m%d-%H%M%S)"
          echo "Deploying with name: $DEPLOYMENT_NAME"
          
          DEPLOYMENT_OUTPUT=$(az deployment group create \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file infra/main.bicep \
            --name "$DEPLOYMENT_NAME" \
            --parameters environment="${{ needs.setup.outputs.environment }}" \
            --parameters applicationName="todolist" \
            --parameters location="${{ env.LOCATION }}" \
            --parameters postgresAdminLogin="todolistadmin" \
            --parameters postgresAdminPassword='${{ secrets.POSTGRES_ADMIN_PASSWORD }}' \
            --parameters logRetentionInDays=30 \
            --parameters databaseSkuName="Standard_B1ms" \
            --parameters databaseStorageSizeGB=32 \
            --parameters enableDatabaseHA=false \
            --parameters minReplicas=0 \
            --parameters maxReplicas=10 \
            --parameters enableZoneRedundancy=false \
            --verbose \
            --query 'properties.outputs' \
            --output json)
          
          echo "Deployment output: $DEPLOYMENT_OUTPUT"
          
          APP_URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerAppUrl.value')
          ACR_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerRegistryName.value')
          ACR_SERVER=$(echo $DEPLOYMENT_OUTPUT | jq -r '.containerRegistryServer.value')
          
          echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
          echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "acr-server=$ACR_SERVER" >> $GITHUB_OUTPUT

  # Build and push container image
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure]
    if: needs.setup.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Build and push container image
        id: build
        run: |
          IMAGE_TAG="todolist-app:${{ github.sha }}"
          
          az acr build \
            --registry ${{ needs.deploy-infrastructure.outputs.acr-name }} \
            --image $IMAGE_TAG \
            --file Dockerfile \
            .
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Update container app with new image
  deploy-application:
    runs-on: ubuntu-latest
    needs: [setup, deploy-infrastructure, build-and-push-image]
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Update Container App
        run: |
          FULL_IMAGE_NAME="${{ needs.deploy-infrastructure.outputs.acr-server }}/${{ needs.build-and-push-image.outputs.image-tag }}"
          
          # Update the container app with the new image
          az deployment group create \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --template-file infra/main.bicep \
            --parameters environment="${{ needs.setup.outputs.environment }}" \
            --parameters applicationName="todolist" \
            --parameters location="${{ env.LOCATION }}" \
            --parameters postgresAdminLogin="todolistadmin" \
            --parameters postgresAdminPassword='${{ secrets.POSTGRES_ADMIN_PASSWORD }}' \
            --parameters logRetentionInDays=30 \
            --parameters databaseSkuName="Standard_B1ms" \
            --parameters databaseTier="Burstable" \
            --parameters databaseStorage=32768 \
            --parameters enableHighAvailability=false \
            --parameters containerAppMinReplicas=0 \
            --parameters containerAppMaxReplicas=10 \
            --parameters enableZoneRedundancy=false \
            --parameters containerImage="$FULL_IMAGE_NAME"

      - name: Verify deployment
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.app-url }}"
          echo "Application URL: $APP_URL"
          
          # Wait for the app to be ready
          sleep 60
          
          # Check health endpoint
          echo "Checking health endpoint..."
          curl -f "$APP_URL/health" || exit 1
          
          echo "✅ Deployment successful!"
          echo "🌐 Application URL: $APP_URL"
