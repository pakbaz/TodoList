name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev|staging|prod)'
        required: true
        default: 'dev'
      imageTag:
        description: 'Container image tag to deploy'
        required: true
        default: 'latest'
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency: deploy-${{ github.event.inputs.environment || 'dev' }}
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Set variables
        id: vars
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "imageRepo=${{ secrets.ACR_LOGIN_SERVER }}/todolist" >> $GITHUB_OUTPUT
          echo "imageTag=${{ github.event.inputs.imageTag || 'latest' }}" >> $GITHUB_OUTPUT
      - name: Docker login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Ensure image exists (build if missing)
        run: |
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/todolist:${{ steps.vars.outputs.imageTag }}
          echo "Checking for image $IMAGE"
          (docker pull $IMAGE && echo "Found existing image") || (
            echo "Image not found; building locally" && \
            docker build -t $IMAGE . && docker push $IMAGE)
      - name: Bicep Build
        run: |
          az bicep install --yes
          bicep build infra/main.bicep
      - name: Ensure Resource Group
        run: |
          az group create --name todolist-${{ steps.vars.outputs.env }}-rg --location '${{ env.AZURE_REGION || 'eastus' }}'
      - name: What-If
        run: |
          az deployment group what-if \
            --resource-group todolist-${{ steps.vars.outputs.env }}-rg \
            --name main \
            --template-file infra/main.bicep \
            --parameters env=${{ steps.vars.outputs.env }} imageTag=${{ steps.vars.outputs.imageTag }} imageRepo=${{ steps.vars.outputs.imageRepo }}
      - name: Deploy
        run: |
          az deployment group create \
            --resource-group todolist-${{ steps.vars.outputs.env }}-rg \
            --name main \
            --template-file infra/main.bicep \
            --parameters env=${{ steps.vars.outputs.env }} imageTag=${{ steps.vars.outputs.imageTag }} imageRepo=${{ steps.vars.outputs.imageRepo }}
      - name: Get WebApp Name
        id: outputs
        run: |
          NAME=$(az deployment group show --resource-group todolist-${{ steps.vars.outputs.env }}-rg --name main --query properties.outputs.webAppName.value -o tsv || echo todolist-${{ steps.vars.outputs.env }})
          echo "webapp=$NAME" >> $GITHUB_OUTPUT
      - name: Health Check
        run: |
          URL=https://${{ steps.outputs.outputs.webapp }}.azurewebsites.net/health
          echo "Checking $URL"
          for i in {1..10}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" $URL || true)
            if [ "$code" = "200" ]; then
              echo "Healthy"
              exit 0
            fi
            echo "Attempt $i failed (code=$code). Retrying..."
            sleep 15
          done
          echo "App failed health check" >&2
          exit 1
