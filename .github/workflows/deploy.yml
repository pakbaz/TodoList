name: Deploy to Azure

on:
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/workflows/build-test.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ENVIRONMENT_NAME: ${{ github.event.inputs.environment || 'dev' }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION || 'eastus' }}
  RESOURCE_GROUP_NAME: rg-todolist-${{ github.event.inputs.environment || 'dev' }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Generate version
      id: version
      run: |
        VERSION=$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Publish application
      run: dotnet publish --no-build --configuration Release --output ./publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ./publish
        retention-days: 30

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: csharp

    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'TodoList'
        path: '.'
        format: 'SARIF'
        
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/dependency-check-report.sarif

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [build, security]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP_NAME }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags \
            Environment=${{ env.ENVIRONMENT_NAME }} \
            Application=TodoList \
            ManagedBy=GitHubActions \
            Version=${{ needs.build.outputs.version }}

    - name: Deploy Infrastructure
      id: infrastructure
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./infra/main-simple.bicep
        parameters: |
          environmentName=${{ env.ENVIRONMENT_NAME }}
          location=${{ env.AZURE_LOCATION }}
          resourceGroupName=${{ env.RESOURCE_GROUP_NAME }}
          imageTag=${{ needs.build.outputs.version }}
        failOnStdErr: false

    - name: Build and Push Container Image
      run: |
        # Extract ACR details from infrastructure deployment
        ACR_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name main-simple \
          --query 'properties.outputs.containerRegistryName.value' \
          --output tsv)
        
        ACR_LOGIN_SERVER=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name main-simple \
          --query 'properties.outputs.containerRegistryLoginServer.value' \
          --output tsv)
        
        # Build and push image using ACR build (no local Docker required)
        IMAGE_TAG="$ACR_LOGIN_SERVER/todolist:${{ needs.build.outputs.version }}"
        
        echo "Building container image: $IMAGE_TAG"
        az acr build \
          --registry $ACR_NAME \
          --image todolist:${{ needs.build.outputs.version }} \
          --image todolist:latest \
          .
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update Container App
      id: update_app
      run: |
        # Update container app with new image
        DEPLOYMENT_OUTPUT=$(az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file infra/main-simple.bicep \
          --parameters \
            environmentName=${{ env.ENVIRONMENT_NAME }} \
            location=${{ env.AZURE_LOCATION }} \
            resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} \
            imageTag=${{ needs.build.outputs.version }} \
          --output json)
        
        # Extract app URL from deployment output
        APP_URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.todolistAppUrl.value')
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        echo "Deployed application URL: $APP_URL"

    - name: Run Container Security Scan
      run: |
        # Get the image name from ACR
        ACR_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name main-simple \
          --query 'properties.outputs.containerRegistryName.value' \
          --output tsv)
        
        # Run Trivy security scan
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace \
          aquasec/trivy:latest image \
          --format sarif \
          --output /workspace/trivy-results.sarif \
          $ACR_NAME.azurecr.io/todolist:${{ needs.build.outputs.version }} || true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  verify:
    name: Deployment Verification
    runs-on: ubuntu-latest
    needs: [build, deploy]
    
    steps:
    - name: Wait for Application Ready
      run: |
        echo "Waiting for application to be ready..."
        APP_URL="${{ needs.deploy.outputs.app_url }}"
        
        # Wait up to 5 minutes for the app to be healthy
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Checking health endpoint (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."
          
          if curl -f --max-time 30 "$APP_URL/health"; then
            echo "‚úÖ Application is healthy!"
            break
          else
            echo "‚è≥ Application not ready yet, waiting 10 seconds..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Application failed to start within expected time"
          exit 1
        fi

    - name: Run API Integration Tests
      run: |
        BASE_URL="${{ needs.deploy.outputs.app_url }}"
        
        echo "üß™ Running API integration tests..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s "$BASE_URL/health")
        echo "Health response: $HEALTH_RESPONSE"
        
        # Test MCP endpoints
        echo "Testing MCP API endpoints..."
        
        # Get initial todos count
        INITIAL_RESPONSE=$(curl -s "$BASE_URL/mcp/todos")
        echo "Initial todos: $INITIAL_RESPONSE"
        
        # Add a test todo
        echo "Adding test todo..."
        ADD_RESPONSE=$(curl -s -X POST "$BASE_URL/mcp/todos" \
          -H "Content-Type: application/json" \
          -d '{"title": "Deployment Test - '"$(date)"'", "isDone": false}')
        echo "Add response: $ADD_RESPONSE"
        
        # Verify todo was added
        echo "Verifying todo was added..."
        VERIFY_RESPONSE=$(curl -s "$BASE_URL/mcp/todos")
        echo "Verification response: $VERIFY_RESPONSE"
        
        if echo "$VERIFY_RESPONSE" | grep -q "Deployment Test"; then
          echo "‚úÖ Todo was successfully added!"
        else
          echo "‚ùå Failed to add todo"
          exit 1
        fi
        
        echo "‚úÖ All API tests passed!"

    - name: Performance Test
      run: |
        BASE_URL="${{ needs.deploy.outputs.app_url }}"
        
        echo "üöÄ Running basic performance test..."
        
        # Simple load test with curl
        for i in {1..10}; do
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$BASE_URL/health")
          echo "Request $i: ${RESPONSE_TIME}s"
        done
        
        echo "‚úÖ Performance test completed!"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build, deploy, verify]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success' && needs.verify.result == 'success'
      run: |
        echo "üéâ Deployment to ${{ env.ENVIRONMENT_NAME }} completed successfully!"
        echo "üìä Application URL: ${{ needs.deploy.outputs.app_url }}"
        echo "üè• Health Check: ${{ needs.deploy.outputs.app_url }}/health"
        echo "üìã API Endpoint: ${{ needs.deploy.outputs.app_url }}/mcp/todos"
        echo "üîß Environment: ${{ env.ENVIRONMENT_NAME }}"
        echo "üìç Location: ${{ env.AZURE_LOCATION }}"
        echo "üè∑Ô∏è Version: ${{ needs.build.outputs.version }}"

    - name: Deployment Failure Notification
      if: needs.deploy.result == 'failure' || needs.verify.result == 'failure'
      run: |
        echo "‚ùå Deployment to ${{ env.ENVIRONMENT_NAME }} failed!"
        echo "üîß Environment: ${{ env.ENVIRONMENT_NAME }}"
        echo "üè∑Ô∏è Version: ${{ needs.build.outputs.version }}"
        echo "üìù Check the logs above for detailed error information"
        exit 1
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file infra/main-simple.bicep \
          --parameters \
            environmentName=${{ env.ENVIRONMENT_NAME }} \
            location=${{ env.AZURE_LOCATION }} \
            resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} \
            imageTag="$(echo ${{ github.sha }} | cut -c1-7)" \
          --output json)
        
        # Get app URL from deployment output
        APP_URL=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.todolistAppUrl.value')
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

    - name: Run Deployment Verification
      run: |
        echo "Waiting for application to be ready..."
        sleep 30
        
        # Test health endpoint
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f "${{ steps.update_app.outputs.app_url }}/health"; then
            echo "‚úÖ Application is healthy!"
            break
          else
            echo "‚è≥ Application not ready yet, retrying in 30 seconds..."
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Application failed to start within expected time"
          exit 1
        fi

    - name: Test API Endpoints
      run: |
        BASE_URL="${{ steps.update_app.outputs.app_url }}"
        

