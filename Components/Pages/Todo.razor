@page "/"
@rendermode InteractiveServer
@inject TodoListService TodoService
@using Microsoft.AspNetCore.Components.Web
@implements IDisposable

<PageTitle>Todo</PageTitle>

<div class="todo-container">
    <h1 class="todo-title">Todo List <span class="todo-count">(@todos.Count(todo => !todo.IsDone))</span></h1>
    
    <div class="todo-list">
        @foreach (var todo in todos)
        {
            <div class="todo-item @(todo.IsDone ? "done" : "")">
                <input type="checkbox" class="todo-checkbox" @bind="todo.IsDone" @bind:after="() => OnTodoChanged(todo)" />
                <input class="todo-input" @bind="todo.Title" @bind:after="() => OnTodoChanged(todo)" />
            </div>
        }
    </div>
    
    <div class="todo-add">
        <input class="todo-new-input" placeholder="Something todo" @bind="newTodo" @onkeypress="OnKeyPress" />
        <button class="todo-add-btn" @onclick="AddTodo">Add</button>
    </div>
</div>

@code {
    private List<TodoItem> todos = new();
    private string? newTodo;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
        
        // Refresh every 5 seconds to keep UI in sync
        refreshTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await LoadTodos();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async Task LoadTodos()
    {
        var allTodos = await TodoService.GetAllAsync();
        todos = allTodos.ToList();
    }

    private async Task OnTodoChanged(TodoItem todo)
    {
        await TodoService.UpdateAsync(todo);
        await LoadTodos();
        StateHasChanged();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            var todoItem = new TodoItem { Title = newTodo, IsDone = false };
            await TodoService.AddAsync(todoItem);
            newTodo = string.Empty;
            await LoadTodos();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}