{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "2505260282366870260"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "todolist",
      "metadata": {
        "description": "Application name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "postgresAdminLogin": {
      "type": "string",
      "defaultValue": "todolistadmin",
      "metadata": {
        "description": "PostgreSQL administrator login"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator password"
      }
    },
    "containerImage": {
      "type": "string",
      "defaultValue": "todolist-app:latest",
      "metadata": {
        "description": "Container image name"
      }
    },
    "logRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Log Analytics workspace retention in days"
      }
    },
    "databaseSkuName": {
      "type": "string",
      "defaultValue": "[if(equals(parameters('environment'), 'prod'), 'Standard_D4s_v3', if(equals(parameters('environment'), 'staging'), 'Standard_D2s_v3', 'Standard_B1ms'))]",
      "metadata": {
        "description": "Database SKU name"
      }
    },
    "databaseStorageSizeGB": {
      "type": "int",
      "defaultValue": "[if(equals(parameters('environment'), 'prod'), 128, if(equals(parameters('environment'), 'staging'), 64, 32))]",
      "metadata": {
        "description": "Database storage size in GB"
      }
    },
    "enableDatabaseHA": {
      "type": "bool",
      "defaultValue": "[equals(parameters('environment'), 'prod')]",
      "metadata": {
        "description": "Enable high availability for database"
      }
    },
    "enableZoneRedundancy": {
      "type": "bool",
      "defaultValue": "[equals(parameters('environment'), 'prod')]",
      "metadata": {
        "description": "Enable zone redundancy for container apps environment"
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": "[if(equals(parameters('environment'), 'prod'), 2, if(equals(parameters('environment'), 'staging'), 1, 0))]",
      "metadata": {
        "description": "Minimum replicas for container app"
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": "[if(equals(parameters('environment'), 'prod'), 10, if(equals(parameters('environment'), 'staging'), 5, 3))]",
      "metadata": {
        "description": "Maximum replicas for container app"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[format('{0}-{1}', parameters('applicationName'), parameters('environment'))]",
    "tags": {
      "environment": "[parameters('environment')]",
      "application": "[parameters('applicationName')]",
      "deployedBy": "bicep"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "log-analytics-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[format('{0}-logs', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "retentionInDays": {
            "value": "[parameters('logRetentionInDays')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10837685806601403502"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Log Analytics workspace"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Retention in days for Log Analytics workspace"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Log Analytics workspace"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "features": {
                  "searchVersion": 1,
                  "legacy": 0,
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              }
            }
          ],
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            },
            "workspaceName": {
              "type": "string",
              "value": "[parameters('workspaceName')]"
            },
            "customerId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2023-09-01').customerId]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "app-insights-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[format('{0}-ai', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceResourceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.workspaceId.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7031809350252796277"
            }
          },
          "parameters": {
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights instance"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Application Insights instance"
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace resource ID"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Application Insights instance"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            }
          ],
          "outputs": {
            "appInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
            },
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('appInsightsName')]"
            },
            "instrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "connectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[format('{0}-kv-{1}', variables('resourcePrefix'), uniqueString(resourceGroup().id))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14991104210238366086"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Key Vault"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Key Vault"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable soft delete for the Key Vault"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Soft delete retention in days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable purge protection for the Key Vault"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[tenant().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Enabled",
                "accessPolicies": []
              }
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-registry-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "registryName": {
            "value": "[format('{0}acr{1}', replace(variables('resourcePrefix'), '-', ''), uniqueString(resourceGroup().id))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12578887672047153487"
            }
          },
          "parameters": {
            "registryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container Registry"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container Registry"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU for the Container Registry"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable admin user for the Container Registry"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-11-01-preview",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "anonymousPullEnabled": false,
                "dataEndpointEnabled": false,
                "publicNetworkAccess": "Enabled",
                "zoneRedundancy": "[if(equals(parameters('sku'), 'Premium'), 'Enabled', 'Disabled')]"
              }
            }
          ],
          "outputs": {
            "registryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            },
            "registryName": {
              "type": "string",
              "value": "[parameters('registryName')]"
            },
            "registryServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-11-01-preview').loginServer]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "postgresql-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[format('{0}-db', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "administratorLogin": {
            "value": "[parameters('postgresAdminLogin')]"
          },
          "administratorPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "skuName": {
            "value": "[parameters('databaseSkuName')]"
          },
          "storageSizeGB": {
            "value": "[parameters('databaseStorageSizeGB')]"
          },
          "enableHighAvailability": {
            "value": "[parameters('enableDatabaseHA')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1941805729975735060"
            }
          },
          "parameters": {
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "The name of the PostgreSQL server"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the PostgreSQL server"
              }
            },
            "administratorLogin": {
              "type": "string",
              "metadata": {
                "description": "Administrator login for PostgreSQL server"
              }
            },
            "administratorPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Administrator password for PostgreSQL server"
              }
            },
            "postgresqlVersion": {
              "type": "string",
              "defaultValue": "16",
              "allowedValues": [
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
              ],
              "metadata": {
                "description": "PostgreSQL version"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_B1ms",
              "metadata": {
                "description": "SKU name for the PostgreSQL server"
              }
            },
            "storageSizeGB": {
              "type": "int",
              "defaultValue": 32,
              "metadata": {
                "description": "Storage size in GB"
              }
            },
            "enableHighAvailability": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable high availability"
              }
            },
            "enableGeoRedundantBackup": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable geo-redundant backup"
              }
            },
            "backupRetentionDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Backup retention days"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the PostgreSQL server"
              }
            }
          },
          "variables": {
            "tier": "[if(startsWith(parameters('skuName'), 'Standard_B'), 'Burstable', if(startsWith(parameters('skuName'), 'Standard_D'), 'GeneralPurpose', 'MemoryOptimized'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2023-12-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[variables('tier')]"
              },
              "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "version": "[parameters('postgresqlVersion')]",
                "storage": {
                  "storageSizeGB": "[parameters('storageSizeGB')]",
                  "autoGrow": "Enabled"
                },
                "backup": {
                  "backupRetentionDays": "[parameters('backupRetentionDays')]",
                  "geoRedundantBackup": "[if(parameters('enableGeoRedundantBackup'), 'Enabled', 'Disabled')]"
                },
                "highAvailability": "[if(parameters('enableHighAvailability'), createObject('mode', 'ZoneRedundant'), createObject('mode', 'Disabled'))]",
                "authConfig": {
                  "activeDirectoryAuth": "Enabled",
                  "passwordAuth": "Enabled"
                }
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2023-12-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'todolistdb')]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.UTF8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2023-12-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAzureServices')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "serverId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName'))]"
            },
            "serverName": {
              "type": "string",
              "value": "[parameters('serverName')]"
            },
            "serverFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('serverName')), '2023-12-01-preview').fullyQualifiedDomainName]"
            },
            "databaseName": {
              "type": "string",
              "value": "todolistdb"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-apps-env-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[format('{0}-env', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.workspaceId.value]"
          },
          "zoneRedundant": {
            "value": "[parameters('enableZoneRedundancy')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12753687891737714606"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Apps Environment"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container Apps Environment"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace ID"
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable zone redundancy"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container Apps Environment"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[parameters('environmentName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(parameters('logAnalyticsWorkspaceId'), '2023-09-01').customerId]",
                    "sharedKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2023-09-01').primarySharedKey]"
                  }
                },
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            }
          ],
          "outputs": {
            "environmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]"
            },
            "environmentName": {
              "type": "string",
              "value": "[parameters('environmentName')]"
            },
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('environmentName')), '2024-03-01').defaultDomain]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "key-vault-secrets-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'key-vault-deployment'), '2022-09-01').outputs.keyVaultName.value]"
          },
          "secrets": {
            "value": [
              {
                "name": "ConnectionStrings--DefaultConnection",
                "value": "[format('Host={0};Database=todolistdb;Username={1};Password={2};SSL Mode=Require', reference(resourceId('Microsoft.Resources/deployments', 'postgresql-deployment'), '2022-09-01').outputs.serverFqdn.value, parameters('postgresAdminLogin'), parameters('postgresAdminPassword'))]"
              },
              {
                "name": "ApplicationInsights--ConnectionString",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.connectionString.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11653256399845188876"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "secrets": {
              "type": "array",
              "metadata": {
                "description": "Array of secrets to store in Key Vault"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "keyVaultSecrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].name)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].value]",
                "contentType": "text/plain"
              }
            }
          ],
          "outputs": {
            "secretNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('secrets'))]",
                "input": "[parameters('secrets')[copyIndex()].name]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'app-insights-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'key-vault-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'postgresql-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-app-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[format('{0}-app', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-apps-env-deployment'), '2022-09-01').outputs.environmentId.value]"
          },
          "containerImage": {
            "value": "[parameters('containerImage')]"
          },
          "registryServer": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-registry-deployment'), '2022-09-01').outputs.registryServer.value]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'key-vault-deployment'), '2022-09-01').outputs.keyVaultName.value]"
          },
          "minReplicas": {
            "value": "[parameters('minReplicas')]"
          },
          "maxReplicas": {
            "value": "[parameters('maxReplicas')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11102885022616155812"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container App"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Container App"
              }
            },
            "environmentId": {
              "type": "string",
              "metadata": {
                "description": "Container Apps Environment ID"
              }
            },
            "containerImage": {
              "type": "string",
              "metadata": {
                "description": "Container image"
              }
            },
            "registryServer": {
              "type": "string",
              "metadata": {
                "description": "Container registry server"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name for secrets"
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Minimum number of replicas"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Maximum number of replicas"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Container App"
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 8080,
              "metadata": {
                "description": "Target port for the container"
              }
            },
            "cpuLimit": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "CPU limit"
              }
            },
            "memoryLimit": {
              "type": "string",
              "defaultValue": "1Gi",
              "metadata": {
                "description": "Memory limit"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "environmentId": "[parameters('environmentId')]",
                "configuration": {
                  "activeRevisionsMode": "Single",
                  "ingress": {
                    "external": true,
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "http",
                    "allowInsecure": false,
                    "traffic": [
                      {
                        "weight": 100,
                        "latestRevision": true
                      }
                    ],
                    "stickySessions": {
                      "affinity": "sticky"
                    }
                  },
                  "registries": [
                    {
                      "server": "[parameters('registryServer')]",
                      "identity": "system"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "connection-string",
                      "keyVaultUrl": "[format('https://{0}.{1}/secrets/ConnectionStrings--DefaultConnection', parameters('keyVaultName'), environment().suffixes.keyvaultDns)]",
                      "identity": "system"
                    },
                    {
                      "name": "app-insights-connection-string",
                      "keyVaultUrl": "[format('https://{0}.{1}/secrets/ApplicationInsights--ConnectionString', parameters('keyVaultName'), environment().suffixes.keyvaultDns)]",
                      "identity": "system"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "name": "todolist-app",
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "cpu": "[json(parameters('cpuLimit'))]",
                        "memory": "[parameters('memoryLimit')]"
                      },
                      "env": [
                        {
                          "name": "ASPNETCORE_ENVIRONMENT",
                          "value": "Production"
                        },
                        {
                          "name": "ASPNETCORE_URLS",
                          "value": "[format('http://+:{0}', parameters('targetPort'))]"
                        },
                        {
                          "name": "ConnectionStrings__DefaultConnection",
                          "secretRef": "connection-string"
                        },
                        {
                          "name": "ApplicationInsights__ConnectionString",
                          "secretRef": "app-insights-connection-string"
                        }
                      ],
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "periodSeconds": 30,
                          "timeoutSeconds": 10,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 5,
                          "failureThreshold": 3
                        },
                        {
                          "type": "Startup",
                          "httpGet": {
                            "path": "/health",
                            "port": "[parameters('targetPort')]",
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 10,
                          "periodSeconds": 10,
                          "timeoutSeconds": 5,
                          "failureThreshold": 30
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]",
                    "rules": [
                      {
                        "name": "http-rule",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "10"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "outputs": {
            "appId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('appName'))]"
            },
            "appName": {
              "type": "string",
              "value": "[parameters('appName')]"
            },
            "appUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01').configuration.ingress.fqdn)]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'container-apps-env-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'container-registry-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'key-vault-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'key-vault-secrets-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "rbac-assignments-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-app-deployment'), '2022-09-01').outputs.principalId.value]"
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'key-vault-deployment'), '2022-09-01').outputs.keyVaultId.value]"
          },
          "registryId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-registry-deployment'), '2022-09-01').outputs.registryId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3715718215672407858"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the managed identity"
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Key Vault resource ID"
              }
            },
            "registryId": {
              "type": "string",
              "metadata": {
                "description": "Container Registry resource ID"
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [
                {
                  "roleDefinitionId": "4633458b-17de-408a-b874-0445c86b69e6",
                  "resourceId": "[parameters('keyVaultId')]",
                  "description": "Key Vault Secrets User for Container App"
                },
                {
                  "roleDefinitionId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                  "resourceId": "[parameters('registryId')]",
                  "description": "ACR Pull for Container App"
                }
              ],
              "metadata": {
                "description": "Role assignments to create"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('roleAssignments')[copyIndex()].resourceId, parameters('principalId'), parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal",
                "description": "[parameters('roleAssignments')[copyIndex()].description]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('roleAssignments'))]",
                "input": {
                  "roleDefinitionId": "[parameters('roleAssignments')[copyIndex()].roleDefinitionId]",
                  "resourceId": "[parameters('roleAssignments')[copyIndex()].resourceId]",
                  "assignmentId": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('roleAssignments')[copyIndex()].resourceId, parameters('principalId'), parameters('roleAssignments')[copyIndex()].roleDefinitionId))]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'container-app-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'container-registry-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'key-vault-deployment')]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "containerAppUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-app-deployment'), '2022-09-01').outputs.appUrl.value]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-registry-deployment'), '2022-09-01').outputs.registryName.value]"
    },
    "containerRegistryServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-registry-deployment'), '2022-09-01').outputs.registryServer.value]"
    },
    "databaseServerName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresql-deployment'), '2022-09-01').outputs.serverName.value]"
    },
    "databaseServerFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'postgresql-deployment'), '2022-09-01').outputs.serverFqdn.value]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'key-vault-deployment'), '2022-09-01').outputs.keyVaultName.value]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'key-vault-deployment'), '2022-09-01').outputs.keyVaultUri.value]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.appInsightsName.value]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.workspaceName.value]"
    },
    "containerAppPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-app-deployment'), '2022-09-01').outputs.principalId.value]"
    }
  }
}