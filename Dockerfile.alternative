# Alternative Dockerfile with improved caching and reliability
# Use this if the main Dockerfile continues to freeze

# Stage 1: Restore dependencies only
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS restore
WORKDIR /src

# Set environment variables
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1
ENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
ENV NUGET_XMLDOC_MODE=skip
ENV DOTNET_NOLOGO=1

# Copy only project files for restore
COPY *.csproj *.sln ./

# Configure NuGet sources explicitly
RUN dotnet nuget list source
RUN dotnet restore --verbosity normal --force --no-cache

# Stage 2: Build application
FROM restore AS build
WORKDIR /src

# Copy source code
COPY . .

# Build the application
RUN dotnet build -c Release --no-restore --verbosity normal

# Publish the application
RUN dotnet publish -c Release -o /app/publish --no-build --verbosity normal

# Stage 3: Runtime
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime
WORKDIR /app

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy published app
COPY --from=build /app/publish .

# Set ownership
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8080

# Set environment variables
ENV ASPNETCORE_URLS=http://+:8080
ENV ASPNETCORE_ENVIRONMENT=Production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

ENTRYPOINT ["dotnet", "TodoList.dll"]
